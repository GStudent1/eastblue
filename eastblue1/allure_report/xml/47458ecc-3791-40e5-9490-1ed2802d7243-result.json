{"name": "test_season_info", "status": "broken", "statusDetails": {"message": "TypeError: the JSON object must be str, bytes or bytearray, not dict", "trace": "self = <test_case.test_season_monitoring.test_season.TestSeason object at 0x10917ff70>\n\n    def test_season_info(self):\n>       respon = HttpEastBlueApi().web_api_data_report_season()\n\ntest_case/test_season_monitoring/test_season.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nclient/http/eastblue_api.py:10: in web_api_data_report_season\n    return self.send_request(\nclient/http/__init__.py:99: in send_request\n    url=self.url, params=self.params, data=- json.loads(self.data), headers=self.headers,timeout=600)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = {'attribute_langs': '[all]', 'game_id': '97', 'sys_lang': 'zh-CN'}, cls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not dict\n\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/__init__.py:341: TypeError"}, "attachments": [{"name": "login", "source": "7716ae12-136c-4a2d-9a99-bd4d73ffa607-attachment.txt", "type": "text/plain"}], "start": 1683168120974, "stop": 1683168121541, "uuid": "ea570d93-1c23-4363-aa3c-24b447e9c855", "historyId": "5b490a64d0e5bb82235a8c02e1f19113", "testCaseId": "dee199294a6bcc355b1ca23c2dd28936", "fullName": "test_case.test_season_monitoring.test_season.TestSeason#test_season_info", "labels": [{"name": "parentSuite", "value": "test_case.test_season_monitoring"}, {"name": "suite", "value": "test_season"}, {"name": "subSuite", "value": "TestSeason"}, {"name": "host", "value": "enhengdeMacBook-Air.local"}, {"name": "thread", "value": "13067-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_season_monitoring.test_season"}]}