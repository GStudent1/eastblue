{"name": "test_season_info", "status": "broken", "statusDetails": {"message": "TypeError: the JSON object must be str, bytes or bytearray, not dict", "trace": "self = <test_case.test_season_monitoring.test_season.TestSeason object at 0x10bbfce80>\n\n    def test_season_info(self):\n        respon=HttpEastBlueApi().web_api_data_report_season()\n>       data=json.loads(respon).get(\"data\")\n\ntest_case/test_season_monitoring/test_season.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = {'data': {'giftbag_list': [{'label': '20426:淘金豪傑招募禮包-1', 'value': '20426'}, {'label': '20427:淘金豪傑招募禮包-2', 'value': '20...': [...], 'server_id': [...]}, {'season_time': [...], 'server_id': [...]}]}, ...]}, 'error_code': '0', 'error_msg': ''}\ncls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not dict\n\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/__init__.py:341: TypeError"}, "attachments": [{"name": "login", "source": "47acf332-be8a-4b2c-8b37-3c091940c018-attachment.txt", "type": "text/plain"}, {"name": "[api-path]/web-api/data-report/season ", "source": "6cde041b-8ba3-4b75-b807-c9880fe95abd-attachment.txt", "type": "text/plain"}], "start": 1682756202395, "stop": 1682756203338, "uuid": "3083f215-b805-4c9d-ad45-d2c7d55ae709", "historyId": "5b490a64d0e5bb82235a8c02e1f19113", "testCaseId": "dee199294a6bcc355b1ca23c2dd28936", "fullName": "test_case.test_season_monitoring.test_season.TestSeason#test_season_info", "labels": [{"name": "parentSuite", "value": "test_case.test_season_monitoring"}, {"name": "suite", "value": "test_season"}, {"name": "subSuite", "value": "TestSeason"}, {"name": "host", "value": "enhengdeMacBook-Air.local"}, {"name": "thread", "value": "10467-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_season_monitoring.test_season"}]}